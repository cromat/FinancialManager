{
  "name": "gcloud",
  "version": "0.29.0",
  "author": {
    "name": "Google Inc."
  },
  "description": "Google Cloud APIs Client Library for Node.js",
  "contributors": [
    {
      "name": "Burcu Dogan",
      "email": "jbd@google.com"
    },
    {
      "name": "Johan Euphrosine",
      "email": "proppy@google.com"
    },
    {
      "name": "Patrick Costello",
      "email": "pcostell@google.com"
    },
    {
      "name": "Ryan Seys",
      "email": "ryan@ryanseys.com"
    },
    {
      "name": "Silvano Luciani",
      "email": "silvano@google.com"
    },
    {
      "name": "Stephen Sawchuk",
      "email": "sawchuk@gmail.com"
    }
  ],
  "main": "./lib/index",
  "files": [
    "lib/",
    "AUTHORS",
    "CONTRIBUTORS",
    "COPYING"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/googlecloudplatform/gcloud-node"
  },
  "keywords": [
    "google apis client",
    "google api client",
    "google apis",
    "google api",
    "google",
    "google cloud platform",
    "google cloud",
    "cloud",
    "google bigquery",
    "google big query",
    "bigquery",
    "big query",
    "google cloud datastore",
    "cloud datastore",
    "datastore",
    "google cloud dns",
    "cloud dns",
    "dns",
    "google cloud pub/sub",
    "google cloud pubsub",
    "cloud pub/sub",
    "cloud pubsub",
    "pub/sub",
    "pubsub",
    "google compute engine",
    "compute engine",
    "computeengine",
    "gce",
    "google app engine",
    "app engine",
    "google appengine",
    "appengine",
    "gae",
    "google cloud storage",
    "cloud storage",
    "gcs",
    "google cloud resource manager",
    "cloud resource manager",
    "resource manager",
    "google cloud search",
    "cloud search",
    "search"
  ],
  "dependencies": {
    "JSONStream": "^1.0.7",
    "array-uniq": "^1.0.2",
    "arrify": "^1.0.0",
    "async": "^1.4.2",
    "camelize": "^1.0.0",
    "concat-stream": "^1.5.0",
    "create-error-class": "^2.0.1",
    "dns-zonefile": "0.1.10",
    "duplexify": "^3.2.0",
    "ent": "^2.2.0",
    "extend": "^3.0.0",
    "gce-images": "^0.2.0",
    "gcs-resumable-upload": "^0.4.0",
    "google-auto-auth": "^0.2.0",
    "google-proto-files": "^0.1.1",
    "grpc": "^0.13.0",
    "hash-stream-validation": "^0.1.0",
    "is": "^3.0.1",
    "methmeth": "^1.0.0",
    "mime-types": "^2.0.8",
    "modelo": "^4.2.0",
    "once": "^1.3.1",
    "prop-assign": "^1.0.0",
    "propprop": "^0.3.0",
    "protobufjs": "^5.0.1",
    "pumpify": "^1.3.3",
    "request": "^2.53.0",
    "retry-request": "^1.2.3",
    "rgb-hex": "^1.0.0",
    "snake": "0.0.1",
    "snakeize": "^0.1.0",
    "split-array-stream": "^1.0.0",
    "stream-events": "^1.0.1",
    "string-format-obj": "^1.0.0",
    "through2": "^2.0.0"
  },
  "devDependencies": {
    "bytebuffer": "^4.0.0",
    "coveralls": "^2.11.2",
    "deep-strict-equal": "^0.1.0",
    "dox": "^0.8.0",
    "glob": "^5.0.9",
    "globby": "^3.0.1",
    "istanbul": "^0.3.5",
    "jscs": "^2.1.1",
    "jshint": "^2.9.1",
    "mitm": "^1.1.0",
    "mocha": "^2.1.0",
    "mockery-next": "^2.0.1-3",
    "multiline": "^1.0.2",
    "node-uuid": "^1.4.3",
    "tmp": "0.0.27"
  },
  "scripts": {
    "docs": "node ./scripts/docs.js",
    "lint": "jshint lib/ system-test/ test/ && jscs lib/ system-test/ test/",
    "test": "npm run docs && mocha test/*/*.js test/index.js test/docs.js",
    "system-test": "mocha system-test/* --timeout 60s --bail",
    "cover": "istanbul cover -x 'system-test/*' _mocha -- --timeout 60s --bail test/*/*.js test/docs.js system-test/*",
    "coveralls": "istanbul cover -x 'system-test/*' _mocha --report lcovonly -- --timeout 60s --bail test/*/*.js test/docs.js system-test/* -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "license": "Apache-2.0",
  "readme": "# Google Cloud Node.js Client\n> Node.js idiomatic client for [Google Cloud Platform](https://cloud.google.com/) services.\n\n[![NPM Version](https://img.shields.io/npm/v/gcloud.svg)](https://www.npmjs.org/package/gcloud)\n[![Travis Build Status](https://travis-ci.org/GoogleCloudPlatform/gcloud-node.svg)](https://travis-ci.org/GoogleCloudPlatform/gcloud-node/)\n[![Coverage Status](https://img.shields.io/coveralls/GoogleCloudPlatform/gcloud-node.svg)](https://coveralls.io/r/GoogleCloudPlatform/gcloud-node?branch=master)\n\n* [Homepage][gcloud-homepage]\n* [API Documentation][gcloud-docs]\n\nThis client supports the following Google Cloud Platform services:\n\n* [Google BigQuery](#google-bigquery)\n* [Google Cloud Datastore](#google-cloud-datastore)\n* [Google Cloud DNS](#google-cloud-dns)\n* [Google Cloud Pub/Sub](#google-cloud-pubsub)\n* [Google Cloud Storage](#google-cloud-storage)\n* [Google Compute Engine](#google-compute-engine)\n* [Google Prediction API](#google-prediction-api)\n* [Google Translate API](#google-translate-api)\n* [Google Cloud Logging](#google-cloud-logging-beta) (Beta)\n* [Google Cloud Resource Manager](#google-cloud-resource-manager-beta) (Beta)\n* [Google Cloud Vision](#google-cloud-vision-beta) (Beta)\n* [Google Cloud Search](#google-cloud-search-alpha) (Alpha)\n\nIf you need support for other Google APIs, check out the [Google Node.js API Client library][googleapis].\n\n## Quick Start\n\n```sh\n$ npm install --save gcloud\n```\n\n## Example Applications\n\n- [nodejs-getting-started][nodejs-getting-started] - A sample and [tutorial][nodejs-getting-started-tutorial] that demonstrates how to build a complete web application using Cloud Datastore, Cloud Storage, and Cloud Pub/Sub and deploy it to Google App Engine or Google Compute Engine.\n- [gcloud-node-todos][gcloud-todos] - A TodoMVC backend using gcloud-node and Datastore.\n- [gitnpm][gitnpm] - Easily lookup an npm package's GitHub repo using gcloud-node and Google App Engine.\n- [gcloud-kvstore][gcloud-kvstore] - Use Datastore as a simple key-value store.\n- [hya-wave][hya-wave] - Cloud-based web sample editor. Part of the [hya-io][hya-io] family of products.\n\n## Authentication\n\nWith `gcloud-node` it's incredibly easy to get authenticated and start using Google's APIs. You can set your credentials on a global basis as well as on a per-API basis. See each individual API section below to see how you can auth on a per-API-basis. This is useful if you want to use different accounts for different Google Cloud services.\n\n### On Google Compute Engine\n\nIf you are running this client on Google Compute Engine, we handle authentication for you with no configuration. You just need to make sure that when you [set up the GCE instance][gce-how-to], you add the correct scopes for the APIs you want to access.\n\n``` js\n// Authenticating on a global basis.\nvar projectId = process.env.GCLOUD_PROJECT_ID; // E.g. 'grape-spaceship-123'\nvar gcloud = require('gcloud')({\n  projectId: projectId\n});\n\n// ...you're good to go! See the next section to get started using the APIs.\n```\n\n### Elsewhere\n\nIf you are not running this client on Google Compute Engine, you need a Google Developers service account. To create a service account:\n\n1. Visit the [Google Developers Console][dev-console].\n2. Create a new project or click on an existing project.\n3. Navigate to  **APIs & auth** > **APIs section** and turn on the following APIs (you may need to enable billing in order to use these services):\n  * Google Cloud Datastore API\n  * Google Cloud Storage\n  * Google Cloud Storage JSON API\n4. Navigate to **APIs & auth** >  **Credentials** and then:\n  * If you want to use a new service account, click on **Create new Client ID** and select **Service account**. After the account is created, you will be prompted to download the JSON key file that the library uses to authenticate your requests.\n  * If you want to generate a new key for an existing service account, click on **Generate new JSON key** and download the JSON key file.\n\n``` js\n// Authenticating on a global basis.\nvar projectId = process.env.GCLOUD_PROJECT_ID; // E.g. 'grape-spaceship-123'\n\nvar gcloud = require('gcloud')({\n  projectId: projectId,\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// ...you're good to go! See the next section to get started using the APIs.\n```\n\nYou can also set auth on a per-API-instance basis. The examples below show you how.\n\n\n## Google BigQuery\n\n- [API Documentation][gcloud-bigquery-docs]\n- [Official Documentation][cloud-bigquery-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\nvar bigquery = gcloud.bigquery({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Access an existing dataset and table.\nvar schoolsDataset = bigquery.dataset('schools');\nvar schoolsTable = schoolsDataset.table('schoolsData');\n\n// Import data into a table.\nschoolsTable.import('/local/file.json', function(err, job) {});\n\n// Get results from a query job.\nvar job = bigquery.job('job-id');\n\n// Use a callback.\njob.getQueryResults(function(err, rows) {});\n\n// Or get the same results as a readable stream.\njob.getQueryResults().on('data', function(row) {});\n```\n\n\n## Google Cloud Datastore\n\n- [API Documentation][gcloud-datastore-docs]\n- [Official Documentation][cloud-datastore-docs]\n\n*Follow the [activation instructions][cloud-datastore-activation] to use the Google Cloud Datastore API with your project.*\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\n\nvar dataset = gcloud.datastore.dataset({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\ndataset.get(dataset.key(['Product', 'Computer']), function(err, entity) {\n  console.log(err || entity);\n});\n\n// Save data to your dataset.\nvar blogPostData = {\n  title: 'How to make the perfect homemade pasta',\n  author: 'Andrew Chilton',\n  isDraft: true\n};\n\nvar blogPostKey = dataset.key('BlogPost');\n\ndataset.save({\n  key: blogPostKey,\n  data: blogPostData\n}, function(err) {\n  // `blogPostKey` has been updated with an ID so you can do more operations\n  // with it, such as an update.\n  blogPostData.isDraft = false;\n\n  dataset.save({\n    key: blogPostKey,\n    data: blogPostData\n  }, function(err) {\n    if (!err) {\n      // The blog post is now published!\n    }\n  });\n});\n```\n\n\n## Google Cloud DNS\n\n- [API Documentation][gcloud-dns-docs]\n- [Official Documentation][cloud-dns-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\n\nvar dns = gcloud.dns({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a managed zone.\ndns.createZone('my-new-zone', {\n  dnsName: 'my-domain.com.'\n}, function(err, zone) {});\n\n// Reference an existing zone.\nvar zone = dns.zone('my-existing-zone');\n\n// Create an NS record.\nvar nsRecord = zone.record('ns', {\n  ttl: 86400,\n  name: 'my-domain.com.',\n  data: 'ns-cloud1.googledomains.com.'\n});\n\nzone.addRecord(nsRecord, function(err, change) {});\n\n// Create a zonefile from the records in your zone.\nzone.export('/zonefile.zone', function(err) {});\n```\n\n\n## Google Cloud Pub/Sub\n\n- [API Documentation][gcloud-pubsub-docs]\n- [Official Documentation][cloud-pubsub-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you\n// auth on a global basis (see Authentication section above).\n\nvar pubsub = gcloud.pubsub({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Reference a topic that has been previously created.\nvar topic = pubsub.topic('my-topic');\n\n// Publish a message to the topic.\ntopic.publish({\n  data: 'New message!'\n}, function(err) {});\n\n// Subscribe to the topic.\ntopic.subscribe('new-subscription', function(err, subscription) {\n  // Register listeners to start pulling for messages.\n  function onError(err) {}\n  function onMessage(message) {}\n  subscription.on('error', onError);\n  subscription.on('message', onMessage);\n\n  // Remove listeners to stop pulling for messages.\n  subscription.removeListener('message', onMessage);\n  subscription.removeListener('error', onError);\n});\n```\n\n\n## Google Cloud Storage\n\n- [API Documentation][gcloud-storage-docs]\n- [Official Documentation][cloud-storage-docs]\n\n#### Preview\n\n```js\nvar fs = require('fs');\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\n\nvar gcs = gcloud.storage({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a new bucket.\ngcs.createBucket('my-new-bucket', function(err, bucket) {\n  if (!err) {\n    // \"my-new-bucket\" was successfully created.\n  }\n});\n\n// Reference an existing bucket.\nvar bucket = gcs.bucket('my-existing-bucket');\n\n// Upload a local file to a new file to be created in your bucket.\nbucket.upload('/photos/zoo/zebra.jpg', function(err, file) {\n  if (!err) {\n    // \"zebra.jpg\" is now in your bucket.\n  }\n});\n\n// Download a file from your bucket.\nbucket.file('giraffe.jpg').download({\n  destination: '/photos/zoo/giraffe.jpg'\n}, function(err) {});\n\n// Streams are also supported for reading and writing files.\nvar remoteReadStream = bucket.file('giraffe.jpg').createReadStream();\nvar localWriteStream = fs.createWriteStream('/photos/zoo/giraffe.jpg');\nremoteReadStream.pipe(localWriteStream);\n\nvar localReadStream = fs.createReadStream('/photos/zoo/zebra.jpg');\nvar remoteWriteStream = bucket.file('zebra.jpg').createWriteStream();\nlocalReadStream.pipe(remoteWriteStream);\n```\n\n\n## Google Compute Engine\n\n- [API Documentation][gcloud-compute-docs]\n- [Official Documentation][cloud-compute-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\n\nvar gce = gcloud.compute({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a new VM using the latest OS image of your choice.\nvar zone = gce.zone('us-central1-a');\nvar name = 'ubuntu-http';\n\nzone.createVM(name, { os: 'ubuntu' }, function(err, vm, operation) {\n  // `operation` lets you check the status of long-running tasks.\n\n  operation.onComplete(function(err, metadata) {\n    if (!err) {\n      // Virtual machine created!\n    }\n  });\n});\n```\n\n\n## Google Prediction API\n\n- [API Documentation][gcloud-prediction-docs]\n- [Official Documentation][cloud-prediction-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\n\nvar prediction = gcloud.prediction({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Get all of the trained models in your project.\nprediction.getModels(function(err, models) {\n  if (!err) {\n    // `models` is an array of Model objects.\n  }\n});\n\n// Reference an existing trained model.\nvar model = prediction.model('my-existing-model');\n\n// Train a model.\nmodel.train('english', 'Hello from your friends at Google!', function(err) {});\n\n// Query a model.\nmodel.query('Hello', function(err, results) {\n  if (!err) {\n    // results.winner == 'english'\n    // results.scores == [\n    //   {\n    //     label: 'english',\n    //     score: 1\n    //   },\n    //   {\n    //     label: 'spanish',\n    //     score: 0\n    //   }\n    // ]\n  }\n});\n```\n\n\n## Google Translate API\n\n- [API Documentation][gcloud-translate-docs]\n- [Official Documentation][cloud-translate-docs]\n\n**An API key is required for Translate.** See [Identifying your application to Google][api-key-howto].\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\nvar translate = gcloud.translate({\n  key: 'API Key'\n});\n\n// Translate a string of text.\ntranslate.translate('Hello', 'es', function(err, translation) {\n  if (!err) {\n    // translation = 'Hola'\n  }\n});\n\n// Detect a language from a string of text.\ntranslate.detect('Hello', function(err, results) {\n  if (!err) {\n    // results = {\n    //   language: 'en',\n    //   confidence: 1,\n    //   input: 'Hello'\n    // }\n  }\n});\n\n// Get a list of supported languages.\ntranslate.getLanguages(function(err, languages) {\n  if (!err) {\n    // languages = [\n    //   'af',\n    //   'ar',\n    //   'az',\n    //   ...\n    // ]\n  }\n});\n```\n\n\n## Google Cloud Logging (Beta)\n\n> **This is a Beta release of Google Cloud Logging.** This API is not covered by any SLA or deprecation policy and may be subject to backward-incompatible changes.\n\n- [API Documentation][gcloud-logging-docs]\n- [Official Documentation][cloud-logging-docs]\n\n```js\n// Authenticating on a global-basis. You can also authenticate on a per-API-\n// basis (see Authentication section above).\n\nvar gcloud = require('gcloud')({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar logging = gcloud.logging();\n\n// Create a sink using a Bucket as a destination.\nvar gcs = gcloud.storage();\n\nlogging.createSink('my-new-sink', {\n  destination: gcs.bucket('my-sink')\n}, function(err, sink) {});\n\n// Write a critical entry to a log.\nvar syslog = logging.log('syslog');\n\nvar resource = {\n  type: 'gce_instance',\n  labels: {\n    zone: 'global',\n    instance_id: 3\n  }\n};\n\nvar entry = syslog.entry(resource, {\n  delegate: process.env.user\n});\n\nsyslog.critical(entry, function(err) {});\n\n// Get all entries in your project.\nlogging.getEntries(function(err, entries) {\n  if (!err) {\n    // `entries` contains all of the entries from the logs in your project.\n  }\n});\n```\n\n\n## Google Cloud Resource Manager (Beta)\n\n> **This is a Beta release of Google Cloud Resource Manager.** This feature is not covered by any SLA or deprecation policy and may be subject to backward-incompatible changes.\n\n- [API Documentation][gcloud-resource-docs]\n- [Official Documentation][cloud-resource-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authorizing on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authorization section above).\n\nvar resource = gcloud.resource({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Get all of the projects you maintain.\nresource.getProjects(function(err, projects) {\n  if (!err) {\n    // `projects` contains all of your projects.\n  }\n});\n\n// Get the metadata from your project. (defaults to `my-project`)\nvar project = resource.project();\n\nproject.getMetadata(function(err, metadata) {\n  // `metadata` describes your project.\n});\n```\n\n\n## Google Cloud Vision (Beta)\n\n> **This is a Beta release of Google Cloud Vision.** This feature is not covered by any SLA or deprecation policy and may be subject to backward-incompatible changes.\n\n- [API Documentation][gcloud-vision-docs]\n- [Official Documentation][cloud-vision-docs]\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authorizing on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authorization section above).\n\nvar vision = gcloud.vision({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Read the text from an image.\nvision.detectText('./image.jpg', function(err, text) {\n  // text = [\n  //   'This was text found in the image',\n  //   'This was more text found in the image'\n  // ]\n});\n\n// Detect faces and the locations of their features in an image.\nvision.detectFaces('./image.jpg', function(err, faces) {\n  // faces = [\n  //   {\n  //     angles: {pan,tilt,roll},\n  //     bounds: {\n  //       head: [{x,y},{x,y},{x,y},{x,y}],\n  //       face: [{x,y},{x,y},{x,y},{x,y}]\n  //     },\n  //     features: {\n  //       confidence: 34.489909,\n  //       chin: {\n  //         center: {x,y,z},\n  //         left: {x,y,z},\n  //         right: {x,y,z}\n  //       },\n  //       ears: {\n  //         left: {x,y,z},\n  //         right: {x,y,z}\n  //       },\n  //       eyebrows: {\n  //         left: {\n  //           left: {x,y,z},\n  //           right: {x,y,z},\n  //           top: {x,y,z}\n  //         },\n  //         right: {\n  //           left: {x,y,z},\n  //           right: {x,y,z},\n  //           top: {x,y,z}\n  //         }\n  //       },\n  //       eyes: {\n  //         left: {\n  //           bottom: {x,y,z},\n  //           center: {x,y,z},\n  //           left: {x,y,z},\n  //           pupil: {x,y,z},\n  //           right: {x,y,z},\n  //           top: {x,y,z}\n  //         },\n  //         right: {\n  //           bottom: {x,y,z},\n  //           center: {x,y,z},\n  //           left: {x,y,z},\n  //           pupil: {x,y,z},\n  //           right: {x,y,z},\n  //           top: {x,y,z}\n  //         }\n  //       },\n  //       forehead: {x,y,z},\n  //       lips: {\n  //         bottom: {x,y,z},\n  //         top: {x,y,z}\n  //       },\n  //       mouth: {\n  //         center: {x,y,z},\n  //         left: {x,y,z},\n  //         right: {x,y,z}\n  //       },\n  //       nose: {\n  //         bottom: {\n  //           center: {x,y,z},\n  //           left: {x,y,z},\n  //           right: {x,y,z}\n  //         },\n  //         tip: {x,y,z},\n  //         top: {x,y,z}\n  //       }\n  //     },\n  //     confidence: 56.748849,\n  //     blurry: false,\n  //     dark: false,\n  //     happy: false,\n  //     hat: false,\n  //     mad: false,\n  //     sad: false,\n  //     surprised: false\n  //   }\n  // ]\n});\n```\n\n\n## Google Cloud Search (Alpha)\n\n> **This is an Alpha release of Google Cloud Search.** This feature is not covered by any SLA or deprecation policy and may be subject to backward-incompatible changes.\n\n- [API Documentation][gcloud-search-docs]\n- [Official Documentation][cloud-search-docs] - *If you are not a tester, this documentation is unavailable.*\n\n#### Preview\n\n```js\nvar gcloud = require('gcloud');\n\n// Authenticating on a per-API-basis. You don't need to do this if you auth on a\n// global basis (see Authentication section above).\n\nvar search = gcloud.search({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a document in a new index.\nvar index = search.index('memberData');\n\nvar document = index.document('member-id-34211');\ndocument.addField('preferredContactForm').addTextValue('phone');\n\nindex.createDocument(document, function(err, document) {\n  console.log(err || document);\n});\n\n// Search an index and get the results as a readable object stream.\nvar index = search.index('memberData');\n\nindex.search('preferredContactForm:phone')\n  .on('error', console.error)\n  .on('data', function(document) {\n    // document.id = 'member-id-34211';\n  })\n  .on('end', function() {\n    // All results consumed.\n  });\n```\n\n\n## Contributing\n\nContributions to this library are always welcome and highly encouraged.\n\nSee [CONTRIBUTING](CONTRIBUTING.md) for more information on how to get started.\n\n## License\n\nApache 2.0 - See [COPYING](COPYING) for more information.\n\n[gcloud-homepage]: https://googlecloudplatform.github.io/gcloud-node/\n[gcloud-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs\n[gcloud-bigquery-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/bigquery\n[gcloud-compute-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/compute\n[gcloud-datastore-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/datastore\n[gcloud-dns-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/dns\n[gcloud-logging-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/logging\n[gcloud-prediction-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/prediction\n[gcloud-pubsub-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/pubsub\n[gcloud-resource-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/resource\n[gcloud-search-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/search\n[gcloud-storage-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/storage\n[gcloud-translate-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/translate\n[gcloud-vision-docs]: https://googlecloudplatform.github.io/gcloud-node/#/docs/vision\n\n[nodejs-getting-started]: https://github.com/GoogleCloudPlatform/nodejs-getting-started\n[nodejs-getting-started-tutorial]: https://cloud.google.com/nodejs/getting-started/hello-world\n[gcloud-todos]: https://github.com/GoogleCloudPlatform/gcloud-node-todos\n[gitnpm]: https://github.com/stephenplusplus/gitnpm\n[gcloud-kvstore]: https://github.com/stephenplusplus/gcloud-kvstore\n[hya-wave]: https://wav.hya.io\n[hya-io]: https://hya.io\n\n[dev-console]: https://console.developers.google.com/project\n[gce-how-to]: https://cloud.google.com/compute/docs/authentication#using\n[api-key-howto]: https://cloud.google.com/translate/v2/using_rest#auth\n\n[googleapis]: https://github.com/google/google-api-nodejs-client\n\n[cloud-bigquery-docs]: https://cloud.google.com/bigquery/what-is-bigquery\n\n[cloud-compute-docs]: https://cloud.google.com/compute/docs\n\n[cloud-datastore-docs]: https://cloud.google.com/datastore/docs\n[cloud-datastore-activation]: https://cloud.google.com/datastore/docs/activate\n\n[cloud-dns-docs]: https://cloud.google.com/dns/docs\n\n[cloud-logging-docs]: https://cloud.google.com/logging/docs\n\n[cloud-prediction-docs]: https://cloud.google.com/prediction/docs\n\n[cloud-pubsub-docs]: https://cloud.google.com/pubsub/docs\n\n[cloud-resource-docs]: https://cloud.google.com/resource-manager\n\n[cloud-search-docs]: https://cloud.google.com/search\n\n[cloud-storage-docs]: https://cloud.google.com/storage/docs/overview\n\n[cloud-translate-docs]: https://cloud.google.com/translate/docs\n\n[cloud-vision-docs]: https://cloud.google.com/vision/docs\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/googlecloudplatform/gcloud-node/issues"
  },
  "_id": "gcloud@0.29.0",
  "_from": "gcloud@^0.29.0"
}
