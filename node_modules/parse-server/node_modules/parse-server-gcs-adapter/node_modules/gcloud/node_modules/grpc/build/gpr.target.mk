# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := gpr
DEFS_Debug := \
	'-DTSI_OPENSSL_ALPN_SUPPORT=0' \
	'-DGPR_BACKWARDS_COMPATIBILITY_MODE' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-std=c99 \
	-Wall \
	-Werror \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions

INCS_Debug := \
	-I$(srcdir)/. \
	-I$(srcdir)/include \
	-I/usr/include/nodejs/src \
	-I/usr/include/nodejs/deps/uv/include \
	-I/usr/include/nodejs/deps/v8/include \
	-I/usr/include/nodejs/deps/openssl/openssl/include \
	-I/usr/include/nodejs/deps/zlib \
	-I/usr/include/nodejs/deps/openssl/config/k8

DEFS_Release := \
	'-DTSI_OPENSSL_ALPN_SUPPORT=0' \
	'-DGPR_BACKWARDS_COMPATIBILITY_MODE' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-std=c99 \
	-Wall \
	-Werror \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions

INCS_Release := \
	-I$(srcdir)/. \
	-I$(srcdir)/include \
	-I/usr/include/nodejs/src \
	-I/usr/include/nodejs/deps/uv/include \
	-I/usr/include/nodejs/deps/v8/include \
	-I/usr/include/nodejs/deps/openssl/openssl/include \
	-I/usr/include/nodejs/deps/zlib \
	-I/usr/include/nodejs/deps/openssl/config/k8

OBJS := \
	$(obj).target/$(TARGET)/src/core/profiling/basic_timers.o \
	$(obj).target/$(TARGET)/src/core/profiling/stap_timers.o \
	$(obj).target/$(TARGET)/src/core/support/alloc.o \
	$(obj).target/$(TARGET)/src/core/support/avl.o \
	$(obj).target/$(TARGET)/src/core/support/cmdline.o \
	$(obj).target/$(TARGET)/src/core/support/cpu_iphone.o \
	$(obj).target/$(TARGET)/src/core/support/cpu_linux.o \
	$(obj).target/$(TARGET)/src/core/support/cpu_posix.o \
	$(obj).target/$(TARGET)/src/core/support/cpu_windows.o \
	$(obj).target/$(TARGET)/src/core/support/env_linux.o \
	$(obj).target/$(TARGET)/src/core/support/env_posix.o \
	$(obj).target/$(TARGET)/src/core/support/env_win32.o \
	$(obj).target/$(TARGET)/src/core/support/histogram.o \
	$(obj).target/$(TARGET)/src/core/support/host_port.o \
	$(obj).target/$(TARGET)/src/core/support/load_file.o \
	$(obj).target/$(TARGET)/src/core/support/log.o \
	$(obj).target/$(TARGET)/src/core/support/log_android.o \
	$(obj).target/$(TARGET)/src/core/support/log_linux.o \
	$(obj).target/$(TARGET)/src/core/support/log_posix.o \
	$(obj).target/$(TARGET)/src/core/support/log_win32.o \
	$(obj).target/$(TARGET)/src/core/support/murmur_hash.o \
	$(obj).target/$(TARGET)/src/core/support/slice.o \
	$(obj).target/$(TARGET)/src/core/support/slice_buffer.o \
	$(obj).target/$(TARGET)/src/core/support/stack_lockfree.o \
	$(obj).target/$(TARGET)/src/core/support/string.o \
	$(obj).target/$(TARGET)/src/core/support/string_posix.o \
	$(obj).target/$(TARGET)/src/core/support/string_win32.o \
	$(obj).target/$(TARGET)/src/core/support/subprocess_posix.o \
	$(obj).target/$(TARGET)/src/core/support/subprocess_windows.o \
	$(obj).target/$(TARGET)/src/core/support/sync.o \
	$(obj).target/$(TARGET)/src/core/support/sync_posix.o \
	$(obj).target/$(TARGET)/src/core/support/sync_win32.o \
	$(obj).target/$(TARGET)/src/core/support/thd.o \
	$(obj).target/$(TARGET)/src/core/support/thd_posix.o \
	$(obj).target/$(TARGET)/src/core/support/thd_win32.o \
	$(obj).target/$(TARGET)/src/core/support/time.o \
	$(obj).target/$(TARGET)/src/core/support/time_posix.o \
	$(obj).target/$(TARGET)/src/core/support/time_precise.o \
	$(obj).target/$(TARGET)/src/core/support/time_win32.o \
	$(obj).target/$(TARGET)/src/core/support/tls_pthread.o \
	$(obj).target/$(TARGET)/src/core/support/tmpfile_posix.o \
	$(obj).target/$(TARGET)/src/core/support/tmpfile_win32.o \
	$(obj).target/$(TARGET)/src/core/support/wrap_memcpy.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/libgpr.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/libgpr.a: LIBS := $(LIBS)
$(obj).target/libgpr.a: TOOLSET := $(TOOLSET)
$(obj).target/libgpr.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(obj).target/libgpr.a
# Add target alias
.PHONY: gpr
gpr: $(obj).target/libgpr.a

# Add target alias to "all" target.
.PHONY: all
all: gpr

# Add target alias
.PHONY: gpr
gpr: $(builddir)/libgpr.a

# Copy this to the static library output path.
$(builddir)/libgpr.a: TOOLSET := $(TOOLSET)
$(builddir)/libgpr.a: $(obj).target/libgpr.a FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/libgpr.a
# Short alias for building this static library.
.PHONY: libgpr.a
libgpr.a: $(obj).target/libgpr.a $(builddir)/libgpr.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/libgpr.a

