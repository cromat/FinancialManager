{
  "name": "fast-crc32c",
  "description": "CRC32C algorithm with hardware acceleration and software fallback.",
  "version": "1.0.1",
  "author": {
    "name": "Xiaoyi Shi",
    "email": "ashi009@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/ashi009/node-fast-crc32c.git"
  },
  "main": "./loader",
  "engines": {
    "node": ">= 0.10.0"
  },
  "optionalDependencies": {
    "sse4_crc32": "^4.1.0"
  },
  "scripts": {
    "test": "mocha",
    "posttest": "mocha -R travis-cov",
    "coverage": "mocha -R html-cov > coverage.html",
    "benchmark": "node benchmark"
  },
  "keywords": [
    "crc",
    "crc32",
    "crc32c",
    "sse",
    "sse4",
    "sse4.2"
  ],
  "devDependencies": {
    "benchtable": "^0.0.4",
    "blanket": "*",
    "mocha": "<2.0.0",
    "should": "*",
    "travis-cov": "*",
    "buffer-crc32": "*"
  },
  "config": {
    "blanket": {
      "pattern": [
        "impls/",
        "loader.js"
      ]
    },
    "travis-cov": {
      "threshold": 80
    }
  },
  "readme": "# fast-crc32c [![NPM version](https://badge.fury.io/js/fast-crc32c.png)](http://badge.fury.io/js/fast-crc32c) [![Build Status](https://travis-ci.org/ashi009/node-fast-crc32c.svg?branch=master)](https://travis-ci.org/ashi009/node-fast-crc32c)\n\nfast-crc32c is a CRC-32C algorithm implementation for node.js, which uses\nhardware acceleration (via [voxer/sse4_crc32][sse4_crc32] by Anand Suresh), and\nfallback to software implementation when hardware acceleration fails.\n\n## Performance\n\nCRC-32C is faster then CRC-32, which could take advantage of full CPU operand\nregister width (64bit) instead of CRC-32's 8bit.\n\nWhen using hardware acceleration, CRC-32C is about 7x ~ 9x faster than software\nimplemented CRC-32C.\n\n**Benchmark**\n\nThe 3 tested implementations are:\n\n- **sse4\\_crc32c** Hardware accelerated CRC-32C from [sse4_crc32][sse4_crc32]\n- **js_crc32c** Javascript implemented CRC-32C\n- **js_crc32** Javascript implemented CRC-32 from [buffer-crc32][buffer-crc32]\n\n```\n$ npm run-script benchmark\n\n> fast-crc32c@1.0.0 benchmark /Users/xiaoyi/Projects/node-fast-crc32c\n> node benchmark\n\nsse4_crc32c_hw for inputs 1024B x 2,356,905 ops/sec ±1.23% (94 runs sampled)\nsse4_crc32c_hw for inputs 16611508B, avg 2027B x 171 ops/sec ±0.54% (89 runs sampled)\nsse4_crc32c_sw for inputs 1024B x 987,415 ops/sec ±0.59% (98 runs sampled)\nsse4_crc32c_sw for inputs 16611508B, avg 2027B x 67.53 ops/sec ±0.62% (72 runs sampled)\njs_crc32c for inputs 1024B x 353,343 ops/sec ±0.62% (99 runs sampled)\njs_crc32c for inputs 16611508B, avg 2027B x 13.23 ops/sec ±4.79% (26 runs sampled)\njs_crc32 for inputs 1024B x 345,803 ops/sec ±0.56% (99 runs sampled)\njs_crc32 for inputs 16611508B, avg 2027B x 13.20 ops/sec ±3.96% (26 runs sampled)\n```\n\n| Impl           | 1024B             | 16611508B, avg 2027B |\n|:---------------|------------------:|---------------------:|\n| sse4_crc32c_hw | 2,356,905 ops/sec | 171 ops/sec          |\n| sse4_crc32c_sw | 987,415 ops/sec   | 67.53 ops/sec        |\n| js_crc32c      | 353,343 ops/sec   | 13.23 ops/sec        |\n| js_crc32       | 345,803 ops/sec   | 13.20 ops/sec        |\n\n## Install\n\n```shell\nnpm install fast-crc32c --save\n```\n\n### Usage\n\n```javascript\nvar crc32 = require('fast-crc32c');\nvar result = crc32.calculate(data, initial);\n```\n\n- **data** required, String|Buffer, data to digest\n- **initial** optional, Number, initial CRC-32C digest\n\n[sse4_crc32]: https://github.com/Voxer/sse4_crc32\n[buffer-crc32]: https://github.com/brianloveswords/buffer-crc32\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ashi009/node-fast-crc32c/issues"
  },
  "dependencies": {
    "sse4_crc32": "^4.1.0"
  },
  "_id": "fast-crc32c@1.0.1",
  "_from": "fast-crc32c@^1.0.0"
}
